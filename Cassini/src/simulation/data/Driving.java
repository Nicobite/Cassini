package simulation.data;

//

import java.util.ArrayList;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Cassini
//  @ File Name : Driving.java
//  @ Date : 28/04/2013
//  @ Author : Jean Massardi
//
//




/**
 * Class Driving
 * Represents the features of a driving vehicle
 * @author Jean
 */
public class Driving {
        // effective weight of the vehicule (= with passengers, luggages...) expressed in ratio of the real weight of the vehicle (ex : 1.5 if 0.5 time heavier)
	private float effWeight;
        // effective speed (km/h)
	private int speed;
        // effective acceleration (m/s²)
	private int acceleration;
        // -1 or 1
	private int direction;
        // Actions to compute 
        private ArrayList<Action> actions;
        // Stoplight of the vehicle activated ?
	private boolean stoplight;
        // Warnings spots of the vehicle activated ?
        private boolean warning;
        // -1 left, 0 none, 1 right
        private int turnlight;
        // Vehicule associated with this Driving
        private Vehicle vehicule;
        // Behavior associated with this Driving
        private Behavior behavior;
        // Memory of the actual Rule, FieldOfVision... (see class Memory)
        private Memory memory;


    /**
     * Generates a new Driving (see above for a description of arguments)
     * @param effWeight
     * @param speed
     * @param acceleration
     * @param direction
     * @param mAction
     * @param stoplight
     * @param warning
     * @param turnlight
     * @param behavior
     * @param vehicle
     */
    public Driving(float effWeight, int speed, int acceleration, int direction, ArrayList<Action> mAction,boolean stoplight, boolean warning, int turnlight, Behavior behavior, Vehicle vehicle) {
        
        this.effWeight = effWeight;
        this.speed = speed;
        this.acceleration = acceleration;
        this.direction = direction;
        this.actions = mAction;
        this.stoplight = stoplight;
        this.warning = warning;
        this.turnlight = turnlight;
        this.behavior = behavior;
        this.vehicule = vehicle;
    }
    
    /**
     * Sets the effective weight of a vehicle (ratio of his real weight)
     * @param effWeight
     */
    public void setEffWeight(float effWeight) {
        this.effWeight = effWeight;
    }

    /**
     * Sets if the stop light are activated or not
     * @param stoplight
     */
    public void setStoplight(boolean stoplight) {
        this.stoplight = stoplight;
    }

    /**
     * Sets if the warnings are activated or not
     * @param warning
     */
    public void setWarning(boolean warning) {
        this.warning = warning;
    }

    /**
     * Sets the turn light : -1 left, 0 none, 1 right
     * @param turnlight
     */
    public void setTurnlight(int turnlight) {
        this.turnlight = turnlight;
    }

    /**
     * Gets the effective weight (ratio of effective weight)
     * @return
     */
    public float getEffWeight() {
        return effWeight;
    }

    /**
     * Gets the actual speed (km/h)
     * @return
     */
    public int getSpeed() {
        return speed;
    }

    /**
     * Gets the actual acceleration (m/s²)
     * @return
     */
    public int getAcceleration() {
        return acceleration;
    }

    /**
     * Gets the actual Direction (-1 or 1)
     * @return
     */
    public int getDirection() {
        return direction;
    }

    /**
     * Returns true if the spot ligths are activated
     * @return
     */
    public boolean isStoplight() {
        return stoplight;
    }

    /**
     * Returns true if the warnings are activated
     * @return
     */
    public boolean isWarning() {
        return warning;
    }

    /**
     * Gets the value of turnlight : -1 left, 0 none, 1 right
     * @return
     */
    public int getTurnlight() {
        return turnlight;
    }

    /**
     * Gets the list of action to compute by the vehicle
     * @return
     */
    public ArrayList<Action> getActions() {
        return actions;
    }

    /**
     * Gets the vehicle matching this Driving
     * @return
     */
    public Vehicle getVehicule() {
        return vehicule;
    }

    /**
     * Gets the Behavior of the Person driving the Vehicle
     * @return
     */
    public Behavior getBehavior() {
        return behavior;
    }

    /**
     * Gets the actual memory
     * @return
     */
    public Memory getMemory() {
        return memory;
    }

    /**
     * Sets the direction of the vehicle (-1 or 1)
     * @param direction
     */
    public void setDirection(int direction) {
      this.direction=direction;
    }

    
}
