package simulation.data;

//

import simulation.road.Junction;
import simulation.road.Rule;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : FieldOfVision.java
//  @ Date : 28/04/2013
//  @ Author : 
//
//




/**
 *
 * @author Jean
 */
public class FieldOfVision {
        // List of the rule of the actual road + rules of the directly accessible roads
	private Rule[] rule;
        // List of the next junctions
        private Junction[] jonction;
        // List of the vehicule of the actual road + the next junction's road
	private Vehicle[] othervehicules;
        // Difference of distance beetween the actual vehicule and the ones  seen 
        private int[] distances;
        // Speeds of the vehicule seen (km/h)
        private int[] speeds;
       

    /**
     * Creates new Field of Vision (see FieldOfVisionGenerator
     * @param rule
     * @param jonction
     * @param othervehicules
     * @param distances
     * @param speeds
     */
    public FieldOfVision(Rule[] rule, Junction[] jonction, Vehicle[] othervehicules, int[] distances, int[] speeds) {
        this.rule = rule;
        this.jonction = jonction;
        this.othervehicules = othervehicules;
        this.distances = distances;
        this.speeds =speeds;
    }

    /**
     * Gets the actual rule (Rule[0]) + the rules of the roads of the next junction (Rule[i], i/=0)
     * @param i
     * @return
     */
    public Rule getRule(int i) {
        return rule[i];
    }

    /**
     * Sets the actual rule (Rule[0]) + the rules of the roads of the next junction (Rule[i], i/=0)
     * @param rule
     * @param i
     */
    public void setRule(Rule rule, int i) {
        this.rule[i] = rule;
    }

    /**
     * Gets the next junction (jonction[0]) and the other junctions on the actual road (junction[i])
     * @param i
     * @return
     */
    public Junction getJonction(int i) {
        return jonction[i];
    }

    /**
     * Sets the next junction (jonction[0]) and the other junctions on the actual road (junction[i])
     * @param jonction
     * @param i
     */
    public void setJonction(Junction jonction,int i) {
        this.jonction[i] = jonction;
    }

    /**
     * Gets the list of the vehicle that the current vehicle can see => on the actual road or on the roads of the next junction
     * @param i
     * @return
     */
    public Vehicle getOthervehicules(int i) {
        return othervehicules[i];
    }

    /**
     * Gets the list of the vehicle that the current vehicle can see => on the actual road or on the roads of the next junction
     * @param othervehicules
     * @param i
     */
    public void setOthervehicules(Vehicle othervehicules, int i) {
        this.othervehicules[i] = othervehicules;
    }

    /**
     * Gets the list of the diffenrence of distance beetween the current vehicle and the other vehicle seen i
     * @param i
     * @return
     */
    public int getDistances(int i) {
        return distances[i];
    }

    /**
     * Sets the list of the diffenrence of distance beetween the current vehicle and the other vehicle seen i
     * @param i
     * @param distances
     */
    public void setDistances(int i,int distances) {
        this.distances[i] = distances;
    }
     
     /**
     * Gets the speed of the remote vehicule i (km/h)
     * @param i
     * @return
     */
    public int getSpeeds(int i) {
        return speeds[i];
    }

    /**
     * Sets the speed of the remote vehicule i (km/h)
     * @param i
     * @param speed
     */
    public void setSpeeds(int i,int speed) {
        this.speeds[i] = speed;
    }
}
